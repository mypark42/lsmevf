!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	1.1	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/root/linux/lsmevf/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!C!function	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C!struct	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
ENUM	lsmevf_internal.h	/^#define ENUM(/;"	d
FOREACH_HOOK	lsmevf_internal.h	/^	FOREACH_HOOK(ENUM)$/;"	e	enum:lsmevf_hook_def
FOREACH_HOOK	lsmevf_internal.h	/^#define FOREACH_HOOK(/;"	d
KDIR	Makefile	/^KDIR := \/lib\/modules\/$(shell uname -r)\/build$/;"	m
LSMEVF_DEBUG_H	debug.h	/^#define LSMEVF_DEBUG_H$/;"	d
LSMEVF_HOOK_INIT	hook.c	/^#define LSMEVF_HOOK_INIT(/;"	d	file:
LSMEVF_INTERNAL_H	lsmevf_internal.h	/^#define LSMEVF_INTERNAL_H$/;"	d
NAME	Makefile	/^NAME := lsmevf$/;"	m
PWD	Makefile	/^PWD := $(shell pwd)$/;"	m
SRC	Makefile	/^SRC := mod.c \\$/;"	m
all	Makefile	/^all:$/;"	t
call_orig	lsmevf_internal.h	/^#define call_orig(/;"	d
clean	Makefile	/^clean:$/;"	t
dev_name	event.c	/^	char dev_name[PATH_MAX]; \/\/ PATH_MAX ?$/;"	m	struct:ev_sb_mount	typeref:typename:char[]	file:
dump_lsm_static_call	debug.h	/^static inline void dump_lsm_static_call(struct lsm_static_call  *lsm)$/;"	f	typeref:typename:void
dump_security_hook_list	debug.h	/^static inline void dump_security_hook_list(struct security_hook_list *hl)$/;"	f	typeref:typename:void
dump_static_call_key	debug.h	/^static inline void dump_static_call_key(struct static_call_key *k)$/;"	f	typeref:typename:void
dump_trampoline	debug.h	/^static inline void dump_trampoline(void *tramp)$/;"	f	typeref:typename:void
ev_move_mount	event.c	/^struct ev_move_mount {$/;"	s	file:
ev_sb_kern_mount	event.c	/^struct ev_sb_kern_mount {$/;"	s	file:
ev_sb_mount	event.c	/^struct ev_sb_mount {$/;"	s	file:
ev_sb_remount	event.c	/^struct ev_sb_remount {$/;"	s	file:
ev_sb_umount	event.c	/^struct ev_sb_umount {$/;"	s	file:
flags	event.c	/^	int flags;$/;"	m	struct:ev_sb_umount	typeref:typename:int	file:
flags	event.c	/^	unsigned int flags;$/;"	m	struct:ev_sb_mount	typeref:typename:unsigned int	file:
from_path	event.c	/^	char from_path[PATH_MAX];$/;"	m	struct:ev_move_mount	typeref:typename:char[]	file:
hook	lsmevf_internal.h	/^	union security_list_options hook;$/;"	m	struct:lsmevf_hook	typeref:union:security_list_options
kallsyms_init	mod.c	/^static int kallsyms_init(void)$/;"	f	typeref:typename:int	file:
key	lsmevf_internal.h	/^	struct static_call_key key;$/;"	m	struct:lsmevf_hook	typeref:struct:static_call_key
load	Makefile	/^load:$/;"	t
lsm	lsmevf_internal.h	/^	struct lsm_static_call *lsm;$/;"	m	struct:lsmevf_hook	typeref:struct:lsm_static_call *
lsmevf-y	Makefile	/^lsmevf-y := $(SRC:.c=.o)$/;"	m
lsmevf_exit	mod.c	/^void lsmevf_exit(void)$/;"	f	typeref:typename:void
lsmevf_hook	lsmevf_internal.h	/^struct lsmevf_hook {$/;"	s
lsmevf_hook_def	lsmevf_internal.h	/^enum lsmevf_hook_def {$/;"	g
lsmevf_hook_exit	hook.c	/^void lsmevf_hook_exit(void)$/;"	f	typeref:typename:void
lsmevf_hook_init	hook.c	/^int lsmevf_hook_init(void)$/;"	f	typeref:typename:int
lsmevf_hooks	hook.c	/^static struct lsmevf_hook lsmevf_hooks[LSMEVF_HOOK_COUNT];$/;"	v	typeref:struct:lsmevf_hook[]	file:
lsmevf_init	mod.c	/^int lsmevf_init(void)$/;"	f	typeref:typename:int
lsmevf_kallsyms_name	mod.c	/^unsigned long (*lsmevf_kallsyms_name)(const char *) = NULL;$/;"	v	typeref:typename:unsigned long (*)(const char *)
lsmevf_move_mount	hook.c	/^static int lsmevf_move_mount(const struct path *from_path, const struct path *to_path)$/;"	f	typeref:typename:int	file:
lsmevf_sb_kern_mount	hook.c	/^static int lsmevf_sb_kern_mount(const struct super_block *sb)$/;"	f	typeref:typename:int	file:
lsmevf_sb_mount	hook.c	/^static int lsmevf_sb_mount(const char *dev_name, const struct path *path, const char *type, unsi/;"	f	typeref:typename:int	file:
lsmevf_sb_remount	hook.c	/^static int lsmevf_sb_remount(struct super_block *sb, void *mnt_opts)$/;"	f	typeref:typename:int	file:
lsmevf_sb_umount	hook.c	/^static int lsmevf_sb_umount(struct vfsmount *mnt, int flags)$/;"	f	typeref:typename:int	file:
lsmevf_static_calls_table	hook.c	/^static struct lsm_static_calls_table *lsmevf_static_calls_table = NULL;$/;"	v	typeref:struct:lsm_static_calls_table *	file:
mnt_opts	event.c	/^	unsigned char mnt_opts[PAGE_SIZE];$/;"	m	struct:ev_sb_mount	typeref:typename:unsigned char[]	file:
mnt_path	event.c	/^	char mnt_path[PATH_MAX]; \/\/ vfsmnt(mount)$/;"	m	struct:ev_sb_umount	typeref:typename:char[]	file:
mount_event	event.c	/^union mount_event {$/;"	u	file:
obj-m	Makefile	/^obj-m := $(NAME).o$/;"	m
patch_lsm_static_call	hook.c	/^static void patch_lsm_static_call(struct lsmevf_hook *hook)$/;"	f	typeref:typename:void	file:
path	event.c	/^	char path[PATH_MAX];$/;"	m	struct:ev_sb_mount	typeref:typename:char[]	file:
rollback_lsm_static_call	hook.c	/^static void rollback_lsm_static_call(struct lsmevf_hook *hook)$/;"	f	typeref:typename:void	file:
to_path	event.c	/^	char to_path[PATH_MAX];$/;"	m	struct:ev_move_mount	typeref:typename:char[]	file:
type	event.c	/^	char type[PATH_MAX]; \/\/?$/;"	m	struct:ev_sb_mount	typeref:typename:char[]	file:
unload	Makefile	/^unload:$/;"	t
